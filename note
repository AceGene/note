#!/bin/bash
# TODO consider adding gen note ./ behavior
# TODO completion in current directory for notes, perhaps here argument?
# TODO Force editor generation in already open editor
# set -e # use to make exits and returns abandon script. Investigate usage
####
if [ -f ~/.config/notes/config ]; then . ~/.config/notes/config ; fi # config file for notes that the note cmd wraps
if [ -f /usr/share/bash-completion/completions/notes ]; then . /usr/share/bash-completion/completions/notes ; fi
check_dir() {
	local dir="$(dirname "$1")" ; local echo_return=10000
	if [ $dir == . ] ; then let echo_return=${echo_return}+1 ; fi
	if [[ -d $dir ]] ; then let echo_return=${echo_return}+10 ; fi
	if [[ -f $1 ]] ; then let echo_return=${echo_return}+100 ; fi # Check entire path b/c no gen'd files outside note_dir  
	if [[ -d ${notes_dir}/$dir ]] ; then let echo_return=${echo_return}+1000 ; fi
	if [ ! $echo_return == 10000 ] ; then echo $echo_return ; return 0; fi
 	echo Neither $dir/ or ${notes_dir}/$dir exists. Aborting ; return 1 #TODO add force option
}
chk_exi() { # check existence of file in givin path and open using $editor
	if [ -f $1 ] ; then
		echo $1 exists, opening using $editor
		nohup $editor $1 > /dev/null 2>&1 &
		exit 0
	fi
}
generate_note() { #TODO check subdirs, cleanup repetition. Check if 'notes find' pipe into open is more succinct?
	local name_file=$1 ; local dir=$(dirname "${name_file}")/
	local base=$(basename "${name_file}") ; local today=`date +%y-%m-%d-`
	dir_status=$(check_dir ${name_file})
	local exit_status=$?
	echo $dir_status # TODO temp for debugging
	if [ $exit_status == 1 ] ; then exit 1 ; fi
	if [ "${dir_status:4:1}" == 1 ] || [ "${dir_status:3:1}" == 1 ] ; then chk_exi ${name_file} ; fi # ./$1 
	if [ "${dir_status:1:1}" == 1 ] ; then chk_exi ${notes_dir}/${name_file} ; fi # notes_dir/$1
	if [ "${dir_status:4:1}" == 1 ] ; then
		chk_exi ${notes_dir}/[0-9][0-9]*-[0-9][0-9]*-[0-9]*-${base}* # notes_dir/date-$1.ext
		echo Neither ./$1 or ${notes_dir}/$1 exists, attempting opening with $editor
		nohup notes new ${today}${base} > /dev/null 2>&1 &
	else
		if [ "${dir_status:3:1}" == 1 ] && [ ! "${dir_status:2:1}" == 1 ] ; then echo ./$name_file not found, attempting gen at ${notes_dir}/ ; fi
		chk_exi ${notes_dir}/${dir}[0-9][0-9]*-[0-9][0-9]*-[0-9]*-${base}* # Check $1 with any date in notes dir
		echo Neither ./$1 or ${notes_dir}/$1 exists, attempting opening with $editor
		if [ "${dir_status:1:1}" == 1 ] ; then nohup notes new ${dir}${today}${base} > /dev/null 2>&1 &
		else echo Consider \'mkdir -p ${notes_dir}/${dir}\' as dir does not exist. Aborting ; exit 1 ; fi #TODO add force option
	fi
	exit 0
}
NOTE_INDEX=0
declare -a NOTE_ARGS
for i in $@; do 
	NOTE_ARGS[${NOTE_INDEX}]=$i
    let NOTE_INDEX=${NOTE_INDEX}+1
done
#### variables
editor=$EDITOR
notes_dir=$NOTES_DIRECTORY
file_explorer=xdg-open
note_comm=${NOTE_ARGS[0]} # TODO Use array for auto piping several arguments into relevant commands
#### no argument supplied means open note directory
if [ $# == 0 ] ; then
	nohup ${file_explorer} ${notes_dir} > /dev/null 2>&1 &
	exit 0
fi
#### usage of new/open generates a file with sortable date format or opens file if exists
if [ $note_comm == new ] || [ $note_comm == n ] || [ $note_comm == open ] || [ $note_comm == o ] ; then
	generate_note $2
fi
#### ls/find/grep/search/rm/cat function exactly as they do in vanilla notes
if [ $note_comm == ls ] || [ $note_comm == find ] || [ $note_comm == f ] || [ $note_comm == grep ] || [ $note_comm == g ] || [ $note_comm == search ] || [ $note_comm == s ] || [ $note_comm == rm ] || [ $note_comm == cat ] ; then
	notes $@ && exit 0
	exit 1
fi
#### help
if [ $note_comm == --help ] || [ $note_comm == -h ] ; then
	echo help #TODO generate help 
	notes --help
	exit 0
fi
#### If one arg given and not one of new/open/ls/find/grep/search/rm/cat then default to using given arg alongside 'new' arg
if [ $# == 1 ] ; then
	generate_note $1
fi
echo You have entered an unexpected argument list, please notify Eugene Ayoub via acegene22@gmail.com if you feel this is unintended behavior
