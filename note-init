#!/bin/bash
#
#TODO: check for installation of bash-completion

__parse_script_arguments() {
    while (( "${#}" )); do
        case "${1}" in
            --operating-system|--os)
				[ "${2}" != 'linux' ] && [ "${2}" != 'windows' ] && [ "${2}" != 'wsl' ] && echo "ERROR: unrecognized ${1} parameter ${2}" && return 1
                operating_sys="${2}"
                shift
				;;
            *)
                echo "ERROR: arg ${1} is unexpected" && return 2
                ;;
        esac
        shift
    done
}

__check-cmd-exists() {
	command -v "${1}" >/dev/null 2>&1 || { return 1; }
}

__echo-need-cmd() {
	echo "Installing \"note\" requires \"${1}\" to be installed." >&2
}

__note-init-func () {
	## default values
	local operating_sys=''
    ## fill script vars with cmd line args and/or default values where applicable
    __parse_script_arguments "${@}" || return "1${?}"
	## check if operating sys is correct to run this script
	[ "${operating_sys}" == 'linux' ] || [ "${operating_sys}" == 'wsl' ] || ! echo "NOTE: skipping ${0} as the os='${operating_sys}' is not compatible" || return 1
	return 1
	## hardcoded values
	local script_path="${BASH_SOURCE[0]}"
	local script_dir="$(cd "$(dirname "${script_path}")"; pwd -P)"
	local dir=$(dirname ${script_dir}) # TODO hardcoded
	local note_src_path='/usr/local/bin/note'
	local note_cfg="${HOME}/.config/notes/config"
	local note_src=note-source
	local line='[ -f '"${script_dir}"'/'"${note_src}"' ] && . '"${script_dir}"/"${note_src}"
	local bash_rc="${HOME}/.bashrc"
	local bash_aliases="${HOME}/.bash_aliases"
	local install_notes=0
	#### place note cmd script somewhere in PATH
	if [ ! -f "${note_src_path}" ]; then
		echo "NOTE: ${note_src_path}" does not exist, creating...
		sudo ln -s "${script_dir}"/note "${note_src_path}" || return 1
	fi
	#### add line to .bash_aliases if needed to source note_src
	[ ! -f "${bashrc}" ] && { echo "NOTE: ${bashrc} does not exist, creating..."; touch "${bashrc}" && echo "source ${bash_aliases}" > "${bashrc}"; }
	[ ! -f "${bash_aliases}" ] && echo "NOTE: ${bash_aliases}" does not exist, creating... ; touch "${bash_aliases}"
	grep -qF -- "${line}" "${bash_aliases}" || (echo -e "\n${line}" >> "${bash_aliases}" && echo "NOTE: ${note_src}" added to "${bash_aliases}")
	#### check for required commands for notes install
	__check-cmd-exists make || ! __echo-need-cmd make || exit 1
	__check-cmd-exists curl || ! __echo-need-cmd curl || exit 1
	__check-cmd-exists pkg-config || ! __echo-need-cmd pkg-config || exit 1
	__check-cmd-exists notes || install_notes=1
	if [ "${install_notes}" -eq 1 ]; then
		echo "NOTE: prerequisite \"notes\" for \"note\" installation will be attempted"
		if [ -f ${dir}/third-party/notes/install.sh ] ; then
			chmod 755 ${dir}/third-party/notes/install.sh # TODO: hardcoded path
			sudo bash ${dir}/third-party/notes/install.sh
		else
			echo "NOTE: notes directory not installed or nothing at ${dir}/third_party/notes/install.sh" && return 1
		fi
	fi
	#### config file generation
	if [ ! -f "${note_cfg}" ]; then
		echo "${note_cfg}" does not exist, creating...
		sudo ln -s "${script_dir}"/config "${note_cfg}"
	else # TODO take user input and/or make option to remove non symlink bash_aliases
		test -h "${note_cfg}" || (rm "${note_cfg}" ; sudo ln -s "${script_dir}"/config "${note_cfg}")
	fi
	echo "${0} has finished installing successfully"
}

__note-init-func "${@}" || exit "${?}"
